#include <GL/glut.h>

void init2D(float r, float g, float b)

{

	// glClearColor sets the colour to clear the buffer to.

	glClearColor(r, g, b, 0.0);

	// used to set up the view volume, GL_MODELVIEW can be used to set up viewingtransformation

	glMatrixMode(GL_PROJECTION);

	// gluOrtho2D specifies the coordinates to be used with the viewport which defaultsto the window size.

	gluOrtho2D(0.0, 100.0, 0.0, 100.0);

}

void draw1cube() {
	glBegin(GL_POLYGON);
	glColor3f(1,0,0);
	glVertex3i(20,20,0);
	glVertex3i(20,30,0);
	glVertex3i(30,30,0);
	glVertex3i(30,20,0);
	glEnd();

	glColor3f(0,0,1);
	glBegin(GL_POLYGON);
	glVertex3i(17,34,0);
	glVertex3i(17,26,0);
	glVertex3i(20,20,0);
	glVertex3i(20,30,0);
	glEnd();

	glColor3f(0,1,0);
	glBegin(GL_POLYGON);
	glVertex3i(17,34,0);
	glVertex3i(20,30,0);
	glVertex3i(30,30,0);
	glVertex3i(26,34,0);
	glEnd();
	glFlush();
}

void display(void) {
	glClear(GL_COLOR_BUFFER_BIT);
	draw1cube();
	glTranslatef(15,10,0);
	draw1cube();
	glTranslatef(-15,-10,0);
	glTranslatef(10,15,0);
	draw1cube();
	glTranslatef(-10,-15,0);
	glTranslatef(25,20,0);
	draw1cube();
	glTranslatef(-25,-20,0);
	glRotatef(-2,1,0,0);
	glTranslatef(30,-5,0);	
	draw1cube();
	glTranslatef(-30,5,0);
	glRotatef(2,1,0,0);
}

int main(int argc, char *argv[]) {
	glutInit(&argc,argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(300, 300);
	glutInitWindowPosition(100, 100);
	glutCreateWindow("5 3d RGB cubes");
	init2D(0.75, 0.75, 0.75);
	glutDisplayFunc(display);
	glutMainLoop();
	return 0;

}
